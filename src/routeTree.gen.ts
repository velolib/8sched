/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as UserRouteRouteImport } from './routes/_user/route'
import { Route as UserIndexRouteImport } from './routes/_user/index'
import { Route as UserLoginRouteImport } from './routes/_user/login'

const AdminIndexLazyRouteImport = createFileRoute('/admin/')()
const AdminTeachersLazyRouteImport = createFileRoute('/admin/teachers')()
const AdminSchedulesLazyRouteImport = createFileRoute('/admin/schedules')()
const UserTestLazyRouteImport = createFileRoute('/_user/test')()
const UserTeacherLazyRouteImport = createFileRoute('/_user/teacher')()
const UserStudentLazyRouteImport = createFileRoute('/_user/student')()

const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const UserRouteRoute = UserRouteRouteImport.update({
  id: '/_user',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexLazyRoute = AdminIndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any).lazy(() => import('./routes/admin/index.lazy').then((d) => d.Route))
const UserIndexRoute = UserIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UserRouteRoute,
} as any)
const AdminTeachersLazyRoute = AdminTeachersLazyRouteImport.update({
  id: '/teachers',
  path: '/teachers',
  getParentRoute: () => AdminRouteRoute,
} as any).lazy(() =>
  import('./routes/admin/teachers.lazy').then((d) => d.Route),
)
const AdminSchedulesLazyRoute = AdminSchedulesLazyRouteImport.update({
  id: '/schedules',
  path: '/schedules',
  getParentRoute: () => AdminRouteRoute,
} as any).lazy(() =>
  import('./routes/admin/schedules.lazy').then((d) => d.Route),
)
const UserTestLazyRoute = UserTestLazyRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => UserRouteRoute,
} as any).lazy(() => import('./routes/_user/test.lazy').then((d) => d.Route))
const UserTeacherLazyRoute = UserTeacherLazyRouteImport.update({
  id: '/teacher',
  path: '/teacher',
  getParentRoute: () => UserRouteRoute,
} as any).lazy(() => import('./routes/_user/teacher.lazy').then((d) => d.Route))
const UserStudentLazyRoute = UserStudentLazyRouteImport.update({
  id: '/student',
  path: '/student',
  getParentRoute: () => UserRouteRoute,
} as any).lazy(() => import('./routes/_user/student.lazy').then((d) => d.Route))
const UserLoginRoute = UserLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => UserRouteRoute,
} as any).lazy(() => import('./routes/_user/login.lazy').then((d) => d.Route))

export interface FileRoutesByFullPath {
  '/admin': typeof AdminRouteRouteWithChildren
  '/login': typeof UserLoginRoute
  '/student': typeof UserStudentLazyRoute
  '/teacher': typeof UserTeacherLazyRoute
  '/test': typeof UserTestLazyRoute
  '/admin/schedules': typeof AdminSchedulesLazyRoute
  '/admin/teachers': typeof AdminTeachersLazyRoute
  '/': typeof UserIndexRoute
  '/admin/': typeof AdminIndexLazyRoute
}
export interface FileRoutesByTo {
  '/login': typeof UserLoginRoute
  '/student': typeof UserStudentLazyRoute
  '/teacher': typeof UserTeacherLazyRoute
  '/test': typeof UserTestLazyRoute
  '/admin/schedules': typeof AdminSchedulesLazyRoute
  '/admin/teachers': typeof AdminTeachersLazyRoute
  '/': typeof UserIndexRoute
  '/admin': typeof AdminIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_user': typeof UserRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/_user/login': typeof UserLoginRoute
  '/_user/student': typeof UserStudentLazyRoute
  '/_user/teacher': typeof UserTeacherLazyRoute
  '/_user/test': typeof UserTestLazyRoute
  '/admin/schedules': typeof AdminSchedulesLazyRoute
  '/admin/teachers': typeof AdminTeachersLazyRoute
  '/_user/': typeof UserIndexRoute
  '/admin/': typeof AdminIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | '/login'
    | '/student'
    | '/teacher'
    | '/test'
    | '/admin/schedules'
    | '/admin/teachers'
    | '/'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/student'
    | '/teacher'
    | '/test'
    | '/admin/schedules'
    | '/admin/teachers'
    | '/'
    | '/admin'
  id:
    | '__root__'
    | '/_user'
    | '/admin'
    | '/_user/login'
    | '/_user/student'
    | '/_user/teacher'
    | '/_user/test'
    | '/admin/schedules'
    | '/admin/teachers'
    | '/_user/'
    | '/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  UserRouteRoute: typeof UserRouteRouteWithChildren
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_user': {
      id: '/_user'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UserRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexLazyRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/_user/': {
      id: '/_user/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof UserIndexRouteImport
      parentRoute: typeof UserRouteRoute
    }
    '/admin/teachers': {
      id: '/admin/teachers'
      path: '/teachers'
      fullPath: '/admin/teachers'
      preLoaderRoute: typeof AdminTeachersLazyRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/schedules': {
      id: '/admin/schedules'
      path: '/schedules'
      fullPath: '/admin/schedules'
      preLoaderRoute: typeof AdminSchedulesLazyRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/_user/test': {
      id: '/_user/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof UserTestLazyRouteImport
      parentRoute: typeof UserRouteRoute
    }
    '/_user/teacher': {
      id: '/_user/teacher'
      path: '/teacher'
      fullPath: '/teacher'
      preLoaderRoute: typeof UserTeacherLazyRouteImport
      parentRoute: typeof UserRouteRoute
    }
    '/_user/student': {
      id: '/_user/student'
      path: '/student'
      fullPath: '/student'
      preLoaderRoute: typeof UserStudentLazyRouteImport
      parentRoute: typeof UserRouteRoute
    }
    '/_user/login': {
      id: '/_user/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof UserLoginRouteImport
      parentRoute: typeof UserRouteRoute
    }
  }
}

interface UserRouteRouteChildren {
  UserLoginRoute: typeof UserLoginRoute
  UserStudentLazyRoute: typeof UserStudentLazyRoute
  UserTeacherLazyRoute: typeof UserTeacherLazyRoute
  UserTestLazyRoute: typeof UserTestLazyRoute
  UserIndexRoute: typeof UserIndexRoute
}

const UserRouteRouteChildren: UserRouteRouteChildren = {
  UserLoginRoute: UserLoginRoute,
  UserStudentLazyRoute: UserStudentLazyRoute,
  UserTeacherLazyRoute: UserTeacherLazyRoute,
  UserTestLazyRoute: UserTestLazyRoute,
  UserIndexRoute: UserIndexRoute,
}

const UserRouteRouteWithChildren = UserRouteRoute._addFileChildren(
  UserRouteRouteChildren,
)

interface AdminRouteRouteChildren {
  AdminSchedulesLazyRoute: typeof AdminSchedulesLazyRoute
  AdminTeachersLazyRoute: typeof AdminTeachersLazyRoute
  AdminIndexLazyRoute: typeof AdminIndexLazyRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminSchedulesLazyRoute: AdminSchedulesLazyRoute,
  AdminTeachersLazyRoute: AdminTeachersLazyRoute,
  AdminIndexLazyRoute: AdminIndexLazyRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  UserRouteRoute: UserRouteRouteWithChildren,
  AdminRouteRoute: AdminRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
